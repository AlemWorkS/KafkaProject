services:
  controller-1:
    image: apache/kafka:latest
    container_name: controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  controller-2:
    image: apache/kafka:latest
    container_name: controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  controller-3:
    image: apache/kafka:latest
    container_name: controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - kafka_network

  broker-1: #broker agit comme un ServerName avec lui il est possible de faire des requêtes internes au réseau docker
    image: apache/kafka:latest
    container_name: kafka1
    ports:
      - 29092:9092 #29092 exprime le port externe au conteneur et 9092 le port interne.
                  #Quand une app externe au container docker fait une requete sur son port 29092
                  #elle est redirigée vers le port interne 9092 du conteneur
                  
    environment:
      KAFKA_NODE_ID: 4 #id unique de broker
      KAFKA_PROCESS_ROLES: broker # exprime le rôle du conteneur
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092' 
      #PLAINTEXT://:19092 permet de déclarer un écouteur pour ce container du réseau docker qui utilisera le port 19092 les requêtes entrantes (localhost*docker, les servername de docker [kafka1,broker-1] pour ce container)
      #PLAINTEXT://:19092 peut changer d'un container à un autre
      #Je pourais mettre PLAINTEXT://:39092 pour le broker-2
      #Alors dans KAFKA_ADVERTISED_LISTENERS j'aurais PLAINTEXT://kafka1:39092
      #Chaque listener doit avoir au moins un advertised listener

      #PLAINTEXT_HOST://:9092 permet de déclarer un écouteur pour toutes sources externes au réseau docker ( application et autres ), c'est à dire le container va écouter sur son por 9092 les connexions qui lui sont externes

      # Cette option permet à Kafka d'annoncer des ports spécifiques aux clients (producteurs et consommateurs) du réseau docker et des réseaux externes.
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:19092,PLAINTEXT_HOST://localhost:29092'
      
      #C'est ici que sont prédéfinis des écouteurs
      #PLAINTEXT_HOST://localhost:29092 signifie que si une application lance à partir de son réseau local sur sa machine avec son adresse locale exemple 127.0.0.1:29092 ( localhost fait allusion ici au localhost de la machine appelante et non de docker car chacun possède son réseau)
      #Alors il veut se connecter au serveur (container ici) kafka (kafka1 ici) dans docker et donc le port 9092 qui y est mappé recupère la requête
      
      #PLAINTEXT://kafka1:19092 signifie que dans le reseau interne de docker cette adresse existe aussi pour les requêtes. kafka1 a déjà été défini comme servername de notre container kafka1 qui peut être considéré comme un server
      #Donc kafka1 est le nom pour couvrir l'adresse du container par exemple 127.16.0.5

      #Cette option permet de savoir le listener pour communiquer entre brokers ( il doit se trouver dans KAFKA_LISTENERS )
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network  

  broker-2:
    image: apache/kafka:latest
    container_name: kafka2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network

  broker-3:
    image: apache/kafka:latest
    container_name: kafka3
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka3:19092,PLAINTEXT_HOST://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - kafka_network
    
  app:
    image: kafka_app:v1
    container_name: ccsr_app
    volumes:
      - ./config.yaml:/app/config/config.yaml # Monte le fichier dans le conteneur
    environment:
      CONFIG_PATH: /app/config/config.yaml # Définit le chemin vers le fichier
    ports:
      - 8080:8080 # Mapper les ports
    networks:
      - kafka_network
  
  mysql:
        image: mysql:latest
        container_name: mysql-container
        restart: always
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: omegadb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - "3309:3306"
        volumes:
          - ./omegadb.sql:/docker-entrypoint-initdb.d/omegadb.sql
        networks:
          - kafka_network

networks:
  kafka_network:
    driver: bridge